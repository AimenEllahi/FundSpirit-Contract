{
  "language": "Solidity",
  "sources": {
    "contracts/Campaign.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\nimport \"./Organization.sol\";\r\n\r\n\r\nerror Campaign__NotEnoughEthEntered();\r\nerror Campaign__AlreadyEnrolled();\r\nerror Campaign__MaximumCampaignsReached();\r\nerror Campaign__NoOrganizationEnrolled();\r\n\r\ncontract Campaign {\r\n    address public owner;\r\n    uint256 public minimumContribution;\r\n    mapping(address => bool) public contributers;\r\n   uint256 constant public minimumDisburseAllowed = 1 ether; // hardcoded minimum disburse amount\r\n    uint256 public contributersCount;\r\n    //mapping to store organizations\r\n    address[] public organizations;\r\n\r\n \r\n//constructor with name as parameter\r\n\r\n    constructor(\r\n       \r\n    ) {\r\n        owner = msg.sender;\r\n    \r\n    }\r\n\r\n    function fund() public payable {\r\n        //require(msg.value > minimumContribution);\r\n        contributers[msg.sender] = true;\r\n        contributersCount++;\r\n    }\r\n\r\n    //creating modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyContributer() {\r\n        require(contributers[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    //function to get balance in the contract\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    //get minimum ammount\r\n    function getMinimumContribution() public view returns (uint256) {\r\n        return minimumContribution;\r\n    }\r\n    //function to withdraw money to specific address\r\n    function withdrawMoney(address payable recipient) public {\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n\r\n    //function to enroll organization to this campaign\r\n    function enrollOrganization(address organization) public onlyOwner {\r\n        //check if organzation is already enrolled in this campaign\r\n        for (uint256 i = 0; i < organizations.length; i++) {\r\n            if (organizations[i] == organization) {\r\n                revert Campaign__AlreadyEnrolled();\r\n            }\r\n        }\r\n\r\n        //check if organization is enrolled in 3 campaigns\r\n         if (Organization(organization).getCampaignsCount() >= 3) {\r\n            revert Campaign__MaximumCampaignsReached();\r\n         }\r\n        organizations.push(organization);\r\n    }\r\n\r\n    //disburse all funds to all organizations equally\r\n    function disburseFunds() public onlyOwner {\r\n        //check if enough funds are available\r\n        if (getBalance() < minimumDisburseAllowed) {\r\n            revert Campaign__NotEnoughEthEntered();\r\n        }\r\n\r\n        //No organizations enrolled\r\n        if(organizations.length <= 0){\r\n            revert Campaign__NoOrganizationEnrolled();\r\n        }\r\n\r\n        //equal share of funds\r\n        uint256 minimumDisburseAmount = getBalance() / organizations.length;\r\n        \r\n        \r\n        //disburse funds\r\n        for (uint256 i = 0; i < organizations.length; i++) {\r\n            Organization(organizations[i]).contribute{value: minimumDisburseAmount}();\r\n        }\r\n    }\r\n\r\n \r\n}\r\n"
    },
    "contracts/Organization.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract Organization{\r\n    address public owner;\r\n\r\n    uint256 public minimumContribution;\r\n    mapping(address => bool) public contributers;\r\n    uint256 public contributersCount;\r\n    uint256 public campaignsCount;\r\n    address[] public campaigns;\r\n\r\n\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n   \r\n    }\r\n\r\n    function contribute() public payable {\r\n        //require(msg.value > minimumContribution);\r\n        contributers[msg.sender] = true;\r\n        contributersCount++;\r\n    }\r\n\r\n    //creating modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyContributer() {\r\n        require(contributers[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    //function to get balance in the contract\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    //get minimum ammount\r\n    function getMinimumContribution() public view returns (uint256) {\r\n        return minimumContribution;\r\n    }\r\n    //function to withdraw money to specific address\r\n    function withdrawMoney(address payable recipient, uint256 amount) public onlyOwner {\r\n        require(amount <= getBalance());\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    //function to withdraw money to specific address\r\n    function withdrawAllMoney(address payable recipient) public onlyOwner {\r\n        recipient.transfer(getBalance());\r\n    }\r\n\r\n    //function to get all contributers\r\n    function getAllContributers() public view returns (address[] memory) {\r\n        address[] memory contributersArray = new address[](contributersCount);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i < contributersCount; i++) {\r\n            contributersArray[counter] = contributersArray[i];\r\n            counter++;\r\n        }\r\n        return contributersArray;\r\n    }\r\n\r\n    //get campaign count\r\n    function getCampaignsCount() public view returns (uint256) {\r\n        return campaignsCount;\r\n    }\r\n    \r\n\r\n    //increment total campaigns\r\n    function incrementCampaignsCount() public {\r\n        campaignsCount++;\r\n    }\r\n\r\n    //get all campaigns\r\n    function getAllCampaigns() public view returns (address[] memory) {\r\n        return campaigns;\r\n    }\r\n\r\n    //enroll in campaign\r\n    function enrollInCampaign(address campaignAddress) public {\r\n        //make sure campaign count is less than 3 before pushing\r\n        require(campaignsCount < 3);\r\n        campaigns.push(campaignAddress);\r\n    }\r\n}"
    },
    "contracts/CampaignFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Campaign.sol\";\r\n\r\ncontract CampaignFactory {\r\n    address[] public campaigns;\r\n\r\n    function createCampaign(\r\n        \r\n    ) public returns (address campaign) {\r\n        address newCampaign = address(new Campaign());\r\n        campaigns.push(newCampaign);\r\n        return newCampaign;\r\n    }\r\n\r\n    //get all campaigns\r\n    function getAllCampaigns() public view returns (address[] memory) {\r\n        return campaigns;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/OrganizationFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\nimport \"./Organization.sol\";\r\n\r\n//creates organization campaigns\r\n\r\ncontract OrganizationFactory{\r\n    address[] public organizations;\r\n\r\n    function createOrganization(string memory name, string memory description, string memory website, string memory logo) public {\r\n        address newOrganization = address(new Organization());\r\n        organizations.push(newOrganization);\r\n    }\r\n\r\n    //get all organizations\r\n    function getAllOrganizations() public view returns (address[] memory) {\r\n        return organizations;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}