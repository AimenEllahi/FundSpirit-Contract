{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createCampaign",
      "outputs": [
        {
          "internalType": "address",
          "name": "campaign",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCampaigns",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb665fe3025c6a6aebb74b1377a08ef1497285f509597a382fee6476449a208ba",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "905401",
    "logsBloom": "0x
    "blockHash": "0xe543604c365d70b3d9c4a7ed73c207089e32a3c57ee0e1741ebbd33ba4bba38a",
    "transactionHash": "0xb665fe3025c6a6aebb74b1377a08ef1497285f509597a382fee6476449a208ba",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "905401",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c6a9d809e0e701c0f8f379877fd320f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"campaign\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCampaigns\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CampaignFactory.sol\":\"CampaignFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Campaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./Organization.sol\\\";\\r\\n\\r\\n\\r\\nerror Campaign__NotEnoughEthEntered();\\r\\nerror Campaign__AlreadyEnrolled();\\r\\nerror Campaign__MaximumCampaignsReached();\\r\\n\\r\\ncontract Campaign {\\r\\n    address public owner;\\r\\n    uint256 public minimumContribution;\\r\\n    mapping(address => bool) public contributers;\\r\\n   uint256 constant public minimumDisburseAllowed = 1 ether; // hardcoded minimum disburse amount\\r\\n    uint256 public contributersCount;\\r\\n    //mapping to store organizations\\r\\n    address[] public organizations;\\r\\n\\r\\n \\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        //require(msg.value > minimumContribution);\\r\\n        contributers[msg.sender] = true;\\r\\n        contributersCount++;\\r\\n    }\\r\\n\\r\\n    //creating modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyContributer() {\\r\\n        require(contributers[msg.sender] == true);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //function to get balance in the contract\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    //get minimum ammount\\r\\n    function getMinimumContribution() public view returns (uint256) {\\r\\n        return minimumContribution;\\r\\n    }\\r\\n    //function to withdraw money to specific address\\r\\n    function withdrawMoney(address payable recipient) public {\\r\\n        recipient.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    //function to enroll organization to this campaign\\r\\n    function enrollOrganization(address organization) public onlyOwner {\\r\\n        //check if organzation is already enrolled in this campaign\\r\\n        for (uint256 i = 0; i < organizations.length; i++) {\\r\\n            if (organizations[i] == organization) {\\r\\n                revert Campaign__AlreadyEnrolled();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //check if organization is enrolled in 3 campaigns\\r\\n         if (Organization(organization).getCampaignsCount() >= 3) {\\r\\n            revert Campaign__MaximumCampaignsReached();\\r\\n         }\\r\\n        organizations.push(organization);\\r\\n    }\\r\\n\\r\\n    //disburse all funds to all organizations equally\\r\\n    function disburseFunds() public onlyOwner {\\r\\n        //check if enough funds are available\\r\\n        if (getBalance() < minimumDisburseAllowed) {\\r\\n            revert Campaign__NotEnoughEthEntered();\\r\\n        }\\r\\n\\r\\n        //equal share of funds\\r\\n        uint256 minimumDisburseAmount = getBalance() / organizations.length;\\r\\n        \\r\\n        \\r\\n        //disburse funds\\r\\n        for (uint256 i = 0; i < organizations.length; i++) {\\r\\n            Organization(organizations[i]).contribute{value: minimumDisburseAmount}();\\r\\n        }\\r\\n    }\\r\\n\\r\\n \\r\\n}\\r\\n\",\"keccak256\":\"0xb26b23728932387a36d44c3610d48631ecae0c02b1faa512aaa7fadc5a6a0c95\",\"license\":\"MIT\"},\"contracts/CampaignFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Campaign.sol\\\";\\r\\n\\r\\ncontract CampaignFactory {\\r\\n    address[] public campaigns;\\r\\n\\r\\n    function createCampaign(\\r\\n        \\r\\n    ) public returns (address campaign) {\\r\\n        address newCampaign = address(new Campaign());\\r\\n        campaigns.push(newCampaign);\\r\\n  \\r\\n\\r\\n        return newCampaign;\\r\\n    }\\r\\n\\r\\n    //get all campaigns\\r\\n    function getAllCampaigns() public view returns (address[] memory) {\\r\\n        return campaigns;\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3e5c5b46d3d112bba3013762ba02886f9c8eb626dbf34bf61feeb4c475800a22\",\"license\":\"MIT\"},\"contracts/Organization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ncontract Organization{\\r\\n    address public owner;\\r\\n    string public name;\\r\\n    string public description;\\r\\n    string public website;\\r\\n    string public logo;\\r\\n    uint256 public minimumContribution;\\r\\n    mapping(address => bool) public contributers;\\r\\n    uint256 public contributersCount;\\r\\n    uint256 public campaignsCount;\\r\\n    address[] public campaigns;\\r\\n\\r\\n\\r\\n    //make a struct\\r\\n    struct OrganizationDetails {\\r\\n\\r\\n        string name;\\r\\n        string description;\\r\\n        string website;\\r\\n        string logo;\\r\\n     \\r\\n    }\\r\\n    OrganizationDetails public details;\\r\\n\\r\\n\\r\\n    constructor(string memory _name, string memory _description, string memory _website, string memory _logo, address creator) {\\r\\n        owner = creator;\\r\\n        details.name = _name;\\r\\n        details.description = _description;\\r\\n        details.website = _website;\\r\\n        details.logo = _logo;\\r\\n    }\\r\\n\\r\\n    function contribute() public payable {\\r\\n        //require(msg.value > minimumContribution);\\r\\n        contributers[msg.sender] = true;\\r\\n        contributersCount++;\\r\\n    }\\r\\n\\r\\n    //creating modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyContributer() {\\r\\n        require(contributers[msg.sender] == true);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //function to get balance in the contract\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    //get minimum ammount\\r\\n    function getMinimumContribution() public view returns (uint256) {\\r\\n        return minimumContribution;\\r\\n    }\\r\\n    //function to withdraw money to specific address\\r\\n    function withdrawMoney(address payable recipient, uint256 amount) public onlyOwner {\\r\\n        require(amount <= getBalance());\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    //function to withdraw money to specific address\\r\\n    function withdrawAllMoney(address payable recipient) public onlyOwner {\\r\\n        recipient.transfer(getBalance());\\r\\n    }\\r\\n\\r\\n    //function to get all contributers\\r\\n    function getAllContributers() public view returns (address[] memory) {\\r\\n        address[] memory contributersArray = new address[](contributersCount);\\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 0; i < contributersCount; i++) {\\r\\n            contributersArray[counter] = contributersArray[i];\\r\\n            counter++;\\r\\n        }\\r\\n        return contributersArray;\\r\\n    }\\r\\n\\r\\n    //get details of organization\\r\\n    function getDetails() public view returns (OrganizationDetails memory) {\\r\\n        return details;\\r\\n    }\\r\\n\\r\\n    //get campaign count\\r\\n    function getCampaignsCount() public view returns (uint256) {\\r\\n        return campaignsCount;\\r\\n    }\\r\\n    \\r\\n\\r\\n    //increment total campaigns\\r\\n    function incrementCampaignsCount() public {\\r\\n        campaignsCount++;\\r\\n    }\\r\\n\\r\\n    //get all campaigns\\r\\n    function getAllCampaigns() public view returns (address[] memory) {\\r\\n        return campaigns;\\r\\n    }\\r\\n\\r\\n    //enroll in campaign\\r\\n    function enrollInCampaign(address campaignAddress) public {\\r\\n        //make sure campaign count is less than 3 before pushing\\r\\n        require(campaignsCount < 3);\\r\\n        campaigns.push(campaignAddress);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x924aed8f5bd6bdb5472a9c2df98a359abd43bf401b1ca52cb689f82938344c55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f78806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063141961bc146100465780636201fe691461007657806386cdf60414610094575b600080fd5b610060600480360381019061005b919061025f565b6100b2565b60405161006d91906102cd565b60405180910390f35b61007e6100f1565b60405161008b91906102cd565b60405180910390f35b61009c610189565b6040516100a991906103a6565b60405180910390f35b600081815481106100c257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060405161010090610217565b604051809103906000f08015801561011c573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505090565b6060600080548060200260200160405190810160405280929190818152602001828054801561020d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101c3575b5050505050905090565b610b7a806103c983390190565b600080fd5b6000819050919050565b61023c81610229565b811461024757600080fd5b50565b60008135905061025981610233565b92915050565b60006020828403121561027557610274610224565b5b60006102838482850161024a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102b78261028c565b9050919050565b6102c7816102ac565b82525050565b60006020820190506102e260008301846102be565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61031d816102ac565b82525050565b600061032f8383610314565b60208301905092915050565b6000602082019050919050565b6000610353826102e8565b61035d81856102f3565b935061036883610304565b8060005b838110156103995781516103808882610323565b975061038b8361033b565b92505060018101905061036c565b5085935050505092915050565b600060208201905081810360008301526103c08184610348565b90509291505056fe608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b1a806100606000396000f3fe6080604052600436106100a75760003560e01c8063937e09b111610064578063937e09b1146101aa578063b60d4288146101d5578063e4133d6f146101df578063e792dd8a14610208578063e9f146a314610245578063f84038b114610270576100a7565b806312065fe0146100ac57806314ec993d146100d75780632f971029146100ee57806334b66460146101175780638da5cb5b1461015457806390e4f4c61461017f575b600080fd5b3480156100b857600080fd5b506100c161029b565b6040516100ce91906107cd565b60405180910390f35b3480156100e357600080fd5b506100ec6102a3565b005b3480156100fa57600080fd5b506101156004803603810190610110919061084b565b610426565b005b34801561012357600080fd5b5061013e600480360381019061013991906108b6565b610470565b60405161014b91906108fe565b60405180910390f35b34801561016057600080fd5b50610169610490565b6040516101769190610928565b60405180910390f35b34801561018b57600080fd5b506101946104b4565b6040516101a191906107cd565b60405180910390f35b3480156101b657600080fd5b506101bf6104c0565b6040516101cc91906107cd565b60405180910390f35b6101dd6104c6565b005b3480156101eb57600080fd5b50610206600480360381019061020191906108b6565b610538565b005b34801561021457600080fd5b5061022f600480360381019061022a919061096f565b610765565b60405161023c9190610928565b60405180910390f35b34801561025157600080fd5b5061025a6107a4565b60405161026791906107cd565b60405180910390f35b34801561027c57600080fd5b506102856107aa565b60405161029291906107cd565b60405180910390f35b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fb57600080fd5b670de0b6b3a764000061030c61029b565b1015610344576040517f46cec71a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905061035461029b565b61035e91906109fa565b905060005b600480549050811015610422576004818154811061038457610383610a2b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7bb99ba836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b5050505050808061041a90610a5a565b915050610363565b5050565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561046c573d6000803e3d6000fd5b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b60015481565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600081548092919061053190610a5a565b9190505550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059057600080fd5b60005b600480549050811015610656578173ffffffffffffffffffffffffffffffffffffffff16600482815481106105cb576105ca610a2b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610643576040517f5bb7d60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061064e90610a5a565b915050610593565b5060038173ffffffffffffffffffffffffffffffffffffffff16637e6253da6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610ab7565b106106ff576040517f4dd7f2f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6004818154811061077557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000600154905090565b6000819050919050565b6107c7816107b4565b82525050565b60006020820190506107e260008301846107be565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610818826107ed565b9050919050565b6108288161080d565b811461083357600080fd5b50565b6000813590506108458161081f565b92915050565b600060208284031215610861576108606107e8565b5b600061086f84828501610836565b91505092915050565b6000610883826107ed565b9050919050565b61089381610878565b811461089e57600080fd5b50565b6000813590506108b08161088a565b92915050565b6000602082840312156108cc576108cb6107e8565b5b60006108da848285016108a1565b91505092915050565b60008115159050919050565b6108f8816108e3565b82525050565b600060208201905061091360008301846108ef565b92915050565b61092281610878565b82525050565b600060208201905061093d6000830184610919565b92915050565b61094c816107b4565b811461095757600080fd5b50565b60008135905061096981610943565b92915050565b600060208284031215610985576109846107e8565b5b60006109938482850161095a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a05826107b4565b9150610a10836107b4565b925082610a2057610a1f61099c565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a65826107b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a9757610a966109cb565b5b600182019050919050565b600081519050610ab181610943565b92915050565b600060208284031215610acd57610acc6107e8565b5b6000610adb84828501610aa2565b9150509291505056fea2646970667358221220c7a9a22744088db8fa7f51ea0d854b80b29932bc8cb11f3eaace90f2bc135ccb64736f6c63430008110033a264697066735822122002d7afa9ed2ffb0c136a6f93c90d978272749049239dc00e244380707211e2a564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063141961bc146100465780636201fe691461007657806386cdf60414610094575b600080fd5b610060600480360381019061005b919061025f565b6100b2565b60405161006d91906102cd565b60405180910390f35b61007e6100f1565b60405161008b91906102cd565b60405180910390f35b61009c610189565b6040516100a991906103a6565b60405180910390f35b600081815481106100c257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060405161010090610217565b604051809103906000f08015801561011c573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508091505090565b6060600080548060200260200160405190810160405280929190818152602001828054801561020d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101c3575b5050505050905090565b610b7a806103c983390190565b600080fd5b6000819050919050565b61023c81610229565b811461024757600080fd5b50565b60008135905061025981610233565b92915050565b60006020828403121561027557610274610224565b5b60006102838482850161024a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102b78261028c565b9050919050565b6102c7816102ac565b82525050565b60006020820190506102e260008301846102be565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61031d816102ac565b82525050565b600061032f8383610314565b60208301905092915050565b6000602082019050919050565b6000610353826102e8565b61035d81856102f3565b935061036883610304565b8060005b838110156103995781516103808882610323565b975061038b8361033b565b92505060018101905061036c565b5085935050505092915050565b600060208201905081810360008301526103c08184610348565b90509291505056fe608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b1a806100606000396000f3fe6080604052600436106100a75760003560e01c8063937e09b111610064578063937e09b1146101aa578063b60d4288146101d5578063e4133d6f146101df578063e792dd8a14610208578063e9f146a314610245578063f84038b114610270576100a7565b806312065fe0146100ac57806314ec993d146100d75780632f971029146100ee57806334b66460146101175780638da5cb5b1461015457806390e4f4c61461017f575b600080fd5b3480156100b857600080fd5b506100c161029b565b6040516100ce91906107cd565b60405180910390f35b3480156100e357600080fd5b506100ec6102a3565b005b3480156100fa57600080fd5b506101156004803603810190610110919061084b565b610426565b005b34801561012357600080fd5b5061013e600480360381019061013991906108b6565b610470565b60405161014b91906108fe565b60405180910390f35b34801561016057600080fd5b50610169610490565b6040516101769190610928565b60405180910390f35b34801561018b57600080fd5b506101946104b4565b6040516101a191906107cd565b60405180910390f35b3480156101b657600080fd5b506101bf6104c0565b6040516101cc91906107cd565b60405180910390f35b6101dd6104c6565b005b3480156101eb57600080fd5b50610206600480360381019061020191906108b6565b610538565b005b34801561021457600080fd5b5061022f600480360381019061022a919061096f565b610765565b60405161023c9190610928565b60405180910390f35b34801561025157600080fd5b5061025a6107a4565b60405161026791906107cd565b60405180910390f35b34801561027c57600080fd5b506102856107aa565b60405161029291906107cd565b60405180910390f35b600047905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fb57600080fd5b670de0b6b3a764000061030c61029b565b1015610344576040517f46cec71a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060048054905061035461029b565b61035e91906109fa565b905060005b600480549050811015610422576004818154811061038457610383610a2b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7bb99ba836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b5050505050808061041a90610a5a565b915050610363565b5050565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561046c573d6000803e3d6000fd5b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b60015481565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003600081548092919061053190610a5a565b9190505550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059057600080fd5b60005b600480549050811015610656578173ffffffffffffffffffffffffffffffffffffffff16600482815481106105cb576105ca610a2b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610643576040517f5bb7d60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808061064e90610a5a565b915050610593565b5060038173ffffffffffffffffffffffffffffffffffffffff16637e6253da6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610ab7565b106106ff576040517f4dd7f2f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6004818154811061077557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000600154905090565b6000819050919050565b6107c7816107b4565b82525050565b60006020820190506107e260008301846107be565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610818826107ed565b9050919050565b6108288161080d565b811461083357600080fd5b50565b6000813590506108458161081f565b92915050565b600060208284031215610861576108606107e8565b5b600061086f84828501610836565b91505092915050565b6000610883826107ed565b9050919050565b61089381610878565b811461089e57600080fd5b50565b6000813590506108b08161088a565b92915050565b6000602082840312156108cc576108cb6107e8565b5b60006108da848285016108a1565b91505092915050565b60008115159050919050565b6108f8816108e3565b82525050565b600060208201905061091360008301846108ef565b92915050565b61092281610878565b82525050565b600060208201905061093d6000830184610919565b92915050565b61094c816107b4565b811461095757600080fd5b50565b60008135905061096981610943565b92915050565b600060208284031215610985576109846107e8565b5b60006109938482850161095a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a05826107b4565b9150610a10836107b4565b925082610a2057610a1f61099c565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a65826107b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a9757610a966109cb565b5b600182019050919050565b600081519050610ab181610943565b92915050565b600060208284031215610acd57610acc6107e8565b5b6000610adb84828501610aa2565b9150509291505056fea2646970667358221220c7a9a22744088db8fa7f51ea0d854b80b29932bc8cb11f3eaace90f2bc135ccb64736f6c63430008110033a264697066735822122002d7afa9ed2ffb0c136a6f93c90d978272749049239dc00e244380707211e2a564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 209,
        "contract": "contracts/CampaignFactory.sol:CampaignFactory",
        "label": "campaigns",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}